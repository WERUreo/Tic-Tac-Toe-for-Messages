//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Keli'i Martin on 9/15/16.
//  Copyright Â© 2016 WERUreo. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController
{
    ////////////////////////////////////////////////////////////
    // MARK: - View Controller Life Cycle
    ////////////////////////////////////////////////////////////

    override func viewDidLoad()
    {
        super.viewDidLoad()
    }

    ////////////////////////////////////////////////////////////
    
    override func didReceiveMemoryWarning()
    {
        super.didReceiveMemoryWarning()
    }

    ////////////////////////////////////////////////////////////
    // MARK: - Conversation Handling
    ////////////////////////////////////////////////////////////

    override func willBecomeActive(with conversation: MSConversation)
    {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.

        presentViewController(for: conversation, with: presentationStyle)
    }

    ////////////////////////////////////////////////////////////

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle)
    {
        // Called before the extension transitions to a new presentation style.

        // Use this method to prepare for the change in presentation style.

        guard let conversation = activeConversation else
        {
            fatalError("Expected an active conversation")
        }

        presentViewController(for: conversation, with: presentationStyle)
    }

    ////////////////////////////////////////////////////////////

    override func didResignActive(with conversation: MSConversation)
    {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }

    ////////////////////////////////////////////////////////////

    override func didReceive(_ message: MSMessage, conversation: MSConversation)
    {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }

    ////////////////////////////////////////////////////////////

    override func didStartSending(_ message: MSMessage, conversation: MSConversation)
    {
        // Called when the user taps the send button.
    }

    ////////////////////////////////////////////////////////////

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation)
    {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }

    ////////////////////////////////////////////////////////////

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle)
    {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    ////////////////////////////////////////////////////////////
    // MARK: - Child view controller presentation
    ////////////////////////////////////////////////////////////

    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle)
    {
        let controller: UIViewController
        switch presentationStyle
        {
            case .compact:
                // show the game start VC
                controller = createGameStartVC()
            case .expanded:
                if let message = conversation.selectedMessage,
                   let url = message.url
                {
                    let model = GameModel(from: url) 
                    controller = createGameBoardVC(with: conversation, model: model)
                }
                else
                {
                    controller = createGameBoardVC(with: conversation, model: GameModel(xLocations: nil, oLocations: nil, turn: .x, isComplete: false))
                }
        }

        // Remove any existing child view controllers
        for child in childViewControllers
        {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }

        // Add controller
        addChildViewController(controller)
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)

        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true

        controller.didMove(toParentViewController: self)
    }

    ////////////////////////////////////////////////////////////

    private func createGameStartVC() -> UIViewController
    {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: "GameStartVC") as? GameStartVC else
        {
            fatalError("Cannot instantiate view controller")
        }

        controller.onButtonTap =
        { [unowned self] in
            self.requestPresentationStyle(.expanded)
        }

        return controller
    }

    ////////////////////////////////////////////////////////////

    private func createGameBoardVC(with conversation: MSConversation, model: GameModel) -> UIViewController
    {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: "GameBoardVC") as? GameBoardVC else
        {
            fatalError("Cannot instantiate view controller")
        }

        controller.model = model
        controller.onLocationSelectionComplete =
        { [unowned self]
          model, snapshot in
            let session = conversation.selectedMessage?.session ?? MSSession()
            let caption = "$\(conversation.localParticipantIdentifier) has played their turn."

            self.insertMessageWith(caption: caption, model, session, snapshot, in: conversation)
            self.dismiss()
        }

        controller.onGameCompletion =
        { [unowned self]
          model, playerWon, snapshot in
            let session = conversation.selectedMessage?.session ?? MSSession()
            let caption = playerWon ? "$\(conversation.localParticipantIdentifier) won!" : "No one wins this round."

            self.insertMessageWith(caption: caption, model, session, snapshot, in: conversation)
            self.dismiss()
        }

        return controller
    }
}

////////////////////////////////////////////////////////////

extension MessagesViewController
{
    func insertMessageWith(caption: String,
                           _ model: GameModel,
                           _ session: MSSession,
                           _ image: UIImage,
                           in conversation: MSConversation)
    {
        let message = MSMessage(session: session)
        let template = MSMessageTemplateLayout()
        template.image = image
        template.caption = caption
        message.layout = template
        message.url = model.encode()

        conversation.insert(message)
    }
}
